#ifndef _XIVRES_SCD_H_
#define _XIVRES_SCD_H_

#include "Internal/ByteOrder.h"

#include "Common.h"

namespace XivRes {
	enum class ScdHeaderEndiannessFlag : uint8_t {
		LittleEndian = 0,
		BigEndian = 1,
	};

	struct ScdHeader {
		static const char SedbSignature_Value[4];
		static const char SscfSignature_Value[4];
		static constexpr uint32_t SedbVersion_FFXIV = 3;
		static constexpr uint16_t SscfVersion_FFXIV = 4;

		char SedbSignature[4]{};
		char SscfSignature[4]{};
		LE<uint32_t> SedbVersion;
		ScdHeaderEndiannessFlag EndianFlag{};
		uint8_t SscfVersion{};
		LE<uint16_t> HeaderSize;
		LE<uint32_t> FileSize;
		uint8_t Padding_0x014[0x1C]{};
	};

	static_assert(sizeof ScdHeader == 0x30);

	struct ScdOffsets {
		LE<uint16_t> Table1And4EntryCount;
		LE<uint16_t> Table2EntryCount;
		LE<uint16_t> SoundEntryCount;
		LE<uint16_t> Unknown_0x006;
		LE<uint32_t> Table2Offset;
		LE<uint32_t> SoundEntryOffset;
		LE<uint32_t> Table4Offset;
		LE<uint32_t> Padding_0x014;
		LE<uint32_t> Table5Offset;
		LE<uint32_t> Unknown_0x01C;
	};
	static_assert(sizeof ScdOffsets == 0x20);

	enum class ScdSoundEntryFormat : uint32_t {
		WaveFormatPcm = 0x01,
		Ogg = 0x06,
		WaveFormatAdpcm = 0x0C,
		Empty = 0xFFFFFFFF,
	};

	struct ScdSoundEntryHeader {
		LE<uint32_t> StreamSize;
		LE<uint32_t> ChannelCount;
		LE<uint32_t> SamplingRate;
		LE<ScdSoundEntryFormat> Format;
		LE<uint32_t> LoopStartOffset;
		LE<uint32_t> LoopEndOffset;
		LE<uint32_t> StreamOffset;
		LE<uint16_t> AuxChunkCount;
		LE<uint16_t> Unknown_0x02E;
	};

	static_assert(sizeof ScdSoundEntryHeader == 0x20);

	struct ScdSoundEntryAuxChunk {
		static const char Name_Mark[4];

		char Name[4]{};
		LE<uint32_t> ChunkSize;

		union AuxChunkData {
			struct MarkChunkData {
				LE<uint32_t> LoopStartSampleBlockIndex;
				LE<uint32_t> LoopEndSampleBlockIndex;
				LE<uint32_t> Count;
				LE<uint32_t> SampleBlockIndices[1];
			} Mark;
		} Data;
	};

	struct ScdSoundEntryOggHeader {
		static constexpr uint8_t Version3XorTable[256] = {
			0x3A, 0x32, 0x32, 0x32, 0x03, 0x7E, 0x12, 0xF7, 0xB2, 0xE2, 0xA2, 0x67, 0x32, 0x32, 0x22, 0x32,
			0x32, 0x52, 0x16, 0x1B, 0x3C, 0xA1, 0x54, 0x7B, 0x1B, 0x97, 0xA6, 0x93, 0x1A, 0x4B, 0xAA, 0xA6,
			0x7A, 0x7B, 0x1B, 0x97, 0xA6, 0xF7, 0x02, 0xBB, 0xAA, 0xA6, 0xBB, 0xF7, 0x2A, 0x51, 0xBE, 0x03,
			0xF4, 0x2A, 0x51, 0xBE, 0x03, 0xF4, 0x2A, 0x51, 0xBE, 0x12, 0x06, 0x56, 0x27, 0x32, 0x32, 0x36,
			0x32, 0xB2, 0x1A, 0x3B, 0xBC, 0x91, 0xD4, 0x7B, 0x58, 0xFC, 0x0B, 0x55, 0x2A, 0x15, 0xBC, 0x40,
			0x92, 0x0B, 0x5B, 0x7C, 0x0A, 0x95, 0x12, 0x35, 0xB8, 0x63, 0xD2, 0x0B, 0x3B, 0xF0, 0xC7, 0x14,
			0x51, 0x5C, 0x94, 0x86, 0x94, 0x59, 0x5C, 0xFC, 0x1B, 0x17, 0x3A, 0x3F, 0x6B, 0x37, 0x32, 0x32,
			0x30, 0x32, 0x72, 0x7A, 0x13, 0xB7, 0x26, 0x60, 0x7A, 0x13, 0xB7, 0x26, 0x50, 0xBA, 0x13, 0xB4,
			0x2A, 0x50, 0xBA, 0x13, 0xB5, 0x2E, 0x40, 0xFA, 0x13, 0x95, 0xAE, 0x40, 0x38, 0x18, 0x9A, 0x92,
			0xB0, 0x38, 0x00, 0xFA, 0x12, 0xB1, 0x7E, 0x00, 0xDB, 0x96, 0xA1, 0x7C, 0x08, 0xDB, 0x9A, 0x91,
			0xBC, 0x08, 0xD8, 0x1A, 0x86, 0xE2, 0x70, 0x39, 0x1F, 0x86, 0xE0, 0x78, 0x7E, 0x03, 0xE7, 0x64,
			0x51, 0x9C, 0x8F, 0x34, 0x6F, 0x4E, 0x41, 0xFC, 0x0B, 0xD5, 0xAE, 0x41, 0xFC, 0x0B, 0xD5, 0xAE,
			0x41, 0xFC, 0x3B, 0x70, 0x71, 0x64, 0x33, 0x32, 0x12, 0x32, 0x32, 0x36, 0x70, 0x34, 0x2B, 0x56,
			0x22, 0x70, 0x3A, 0x13, 0xB7, 0x26, 0x60, 0xBA, 0x1B, 0x94, 0xAA, 0x40, 0x38, 0x00, 0xFA, 0xB2,
			0xE2, 0xA2, 0x67, 0x32, 0x32, 0x12, 0x32, 0xB2, 0x32, 0x32, 0x32, 0x32, 0x75, 0xA3, 0x26, 0x7B,
			0x83, 0x26, 0xF9, 0x83, 0x2E, 0xFF, 0xE3, 0x16, 0x7D, 0xC0, 0x1E, 0x63, 0x21, 0x07, 0xE3, 0x01,
		};


		uint8_t Version{};
		uint8_t HeaderSize{};
		uint8_t EncodeByte{};
		uint8_t Padding_0x003{};
		LE<uint32_t> Unknown_0x004;
		LE<uint32_t> Unknown_0x008;
		LE<uint32_t> Unknown_0x00C;
		LE<uint32_t> SeekTableSize;
		LE<uint32_t> VorbisHeaderSize;
		uint32_t Unknown_0x018{};
		uint8_t Padding_0x01C[4]{};
	};

	enum class WaveFormatTag : uint16_t {
		Pcm = 1,
		Adpcm = 2,
	};

#pragma pack(push, 1)
	struct WaveFormatEx {
		WaveFormatTag wFormatTag;
		uint16_t nChannels;
		uint32_t nSamplesPerSec;
		uint32_t nAvgBytesPerSec;
		uint16_t nBlockAlign;
		uint16_t wBitsPerSample;
		uint16_t cbSize;
	};

	struct AdpcmCoefSet {
		short iCoef1;
		short iCoef2;
	};

	struct AdpcmWaveFormat {
		WaveFormatEx wfx;
		short wSamplesPerBlock;
		short wNumCoef;
		AdpcmCoefSet aCoef[32];
	};
#pragma pack(pop)
}

#endif
